#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("hw-f:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = require("socket.io")(server);

io.on("connection", (socket) => {
  // 每個連線者各自的登記表
  let registerBook;

  // 登記每個連線者目前頁面顯示的貼文
  socket.on("register", (postIds) => {
    const idSet = new Set();
    for (const id of postIds) {
      idSet.add(id);
    }
    registerBook = idSet;
  });

  // 通知有該貼文的連線者，於該貼文增加留言
  socket.on("createComment", (comment) => {
    if (registerBook.has(comment.postId)) {
      io.emit("addComment", comment);
    }
  });

  // 通知有該貼文的連線者，移除留言
  socket.on("deleteComment", (data) => {
    if (registerBook.has(data.postId)) {
      io.emit("removeComment", {
        postId: data.postId,
        commentId: data.commentId,
      });
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
